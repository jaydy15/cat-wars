{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/searchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","user","name","alt","height","mass","hair_color","skin_color","eye_color","birth_year","gender","CardList","users","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","result","setState","results","this","filterd","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yTAsBeA,G,kBAnBF,SAACC,GACZ,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAAMG,KAAKC,KAArC,0BACHC,IAAI,KAEN,4BAAKL,EAAMG,KAAKC,MAChB,sCAAYJ,EAAMG,KAAKG,QACvB,oCAAUN,EAAMG,KAAKI,MACrB,2CAAiBP,EAAMG,KAAKK,YAC5B,2CAAiBR,EAAMG,KAAKM,YAC5B,0CAAgBT,EAAMG,KAAKO,WAC3B,2CAAiBV,EAAMG,KAAKQ,YAC5B,uCAAaX,EAAMG,KAAKS,WCbjBC,EAAW,SAACb,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMc,MAAMC,KAAI,SAACZ,GAAD,OACf,kBAAC,EAAD,CAAMa,IAAKb,EAAKC,KAAMD,KAAMA,SCKrBc,EAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,2BACEC,KAAK,SACLF,YAAY,mBACZG,SAAUF,EACVlB,UAAU,UC+BDqB,EAlCf,kDACE,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,MAAO,GACPU,YAAa,IALH,EADhB,gEAUuB,IAAD,OAClBC,MAAM,iCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAY,EAAKC,SAAS,CAAEhB,MAAOe,EAAOE,eAbtD,+BAgBY,IAAD,SACwBC,KAAKT,MAA5BT,EADD,EACCA,MAAOU,EADR,EACQA,YACTS,EAAUnB,EAAMoB,QAAO,SAAC/B,GAAD,OAC3BA,EAAKC,KAAK+B,cAAcC,SAASZ,EAAYW,kBAE/C,OACE,yBAAKlC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEiB,YAAY,mBACZC,aAAc,SAACkB,GAAD,OAAO,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,WAE7D,kBAAC,EAAD,CAAUzB,MAAOmB,SA5BzB,GAAyBO,aCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.040c49f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className='card-container'>\r\n      <img\r\n        src={`https://robohash.org/${props.user.name}?set=set4&size=180x180`}\r\n        alt=''\r\n      />\r\n      <h2>{props.user.name}</h2>\r\n      <p>height: {props.user.height}</p>\r\n      <p>mass: {props.user.mass}</p>\r\n      <p>hair_color : {props.user.hair_color}</p>\r\n      <p>skin_color : {props.user.skin_color}</p>\r\n      <p>eye_color : {props.user.eye_color}</p>\r\n      <p>birth_year : {props.user.birth_year}</p>\r\n      <p>gender : {props.user.gender}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './card-list.css';\r\nimport Card from '../card/Card';\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {props.users.map((user) => (\r\n        <Card key={user.name} user={user} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      type='search'\r\n      placeholder='search character'\r\n      onChange={handleChange}\r\n      className='mb-5'\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/CardList';\nimport SearchBox from './components/searchBox/SearchBox';\n\nexport class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      users: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://swapi.dev/api/people/')\n      .then((response) => response.json())\n      .then((result) => this.setState({ users: result.results }));\n  }\n\n  render() {\n    const { users, searchField } = this.state;\n    const filterd = users.filter((user) =>\n      user.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder='search character'\n          handleChange={(e) => this.setState({ searchField: e.target.value })}\n        />\n        <CardList users={filterd} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}